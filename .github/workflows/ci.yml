name: CI

on: [push, pull_request]

jobs:
  asdf:
    name: ASDF
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      # cache the ASDF directory, using the values from .tool-versions
      - name: ASDF cache
        uses: actions/cache@v2
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('.tool-versions') }}-${{ secrets.CACHE_UUID}}
        id: asdf-cache
      # only run `asdf install` if we didn't hit the cache
      - uses: asdf-vm/actions/install@v1
        if: steps.asdf-cache.outputs.cache-hit != 'true'

  build:
    name: Build Elixir
    runs-on: ubuntu-latest
    needs: asdf
    steps:
      - uses: actions/checkout@v2
      - name: ASDF cache
        uses: actions/cache@v2
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('.tool-versions') }}-${{ secrets.CACHE_UUID}}
        id: asdf-cache
      - uses: mbta/actions/reshim-asdf@v1
      - name: Restore dependencies cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}-${{ secrets.CACHE_UUID}}
      - name: Install dependencies
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

  elixir:
    name: Test Elixir
    runs-on: ubuntu-latest
    needs: build
    env:
      DATABASE_PASSWORD: postgres
      DATABASE_USER: postgres
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ${{env.DATABASE_PASSWORD}}
          POSTGRES_USER:  ${{env.DATABASE_USER}}
          POSTGRES_DB: prediction_analyzer_test
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: ASDF cache
        uses: actions/cache@v2
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('.tool-versions') }}-${{ secrets.CACHE_UUID}}
        id: asdf-cache
      - uses: mbta/actions/reshim-asdf@v1
      - name: Restore dependencies cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}-${{ secrets.CACHE_UUID}}
      - name: Install dependencies
        run: |
          mix local.rebar --force
          mix local.hex --force
      - name: Compile (warnings as errors)
        run: mix compile --force --warnings-as-errors
      - name: Check formatting
        run: mix format --check-formatted
      # - name: Credo
      #   run: mix credo --strict
      - name: Run tests
        env:
          DATABASE_ROOT_URL: postgres://${{env.DATABASE_USER}}:${{env.DATABASE_PASSWORD}}@localhost:5432
        run: mix test --cover
      - name: Save PR information
        run: |
          echo "${{ github.event.pull_request.number }}" > cover/PR_NUMBER
          echo "${{ github.event.pull_request.head.sha }}" > cover/PR_SHA
        if: github.event.pull_request
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: elixir-lcov
          path: cover/
      - uses: mbta/actions/dialyzer@v1

  nodejs:
    name: Test Node
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: ASDF cache
        uses: actions/cache@v2
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('.tool-versions') }}-${{ secrets.CACHE_UUID}}
        id: asdf-cache
      - uses: mbta/actions/reshim-asdf@v1
      - name: Restore dependencies cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}-${{ secrets.CACHE_UUID}}
      - name: Install NPM assets
        run: npm --prefix assets ci
      - name: Check JS formatting
        run: npm --prefix assets run check
      - name: Node tests
        run: npm --prefix assets test
